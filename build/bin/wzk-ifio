#!/bin/bash

_usage(){
cat <<'EOF'
IFIO (I'll Figure It Out)

Using a directory of templated scripts, attempts to run
each in a target directory

Usage: ifio [OPTIONS [ARG]]

OPTIONS:
  -c,--chdir <directory>
    Change to directory before building. Default is the current working directory

  -m,--mnemonic <file>
    Use this file to remember sucessful directory/build combinations

  -v,--verbose
    Allow all running scripts to output (stdout/stderr). Default is not verbose

  -q,--quiet
    Do not print IFIO messages. Default is not quiet

  -k,--colorize
    Filter STDOUT (white), STDERR (red), and Pipe 3 (blue)

  -d,--dump <script>
    Print a list of the importatint environment variables defined in specified script

VARIABLES:

IFIO_SCRIPT_DIR
  Set to the directory containing your IFIO scripts

IFIO SCRIPTS:

Scripts should be writen in a way that they present user-accessible
variables easily, perform ealry tests to fail as quickly as possbile
(to allow finding the right 'fit' for the job quickly), and perform
a highly redundant task using a single script

IFIO Scripts must adhere to a few rules:
 - They must written a (POSIX compliant) SHELL language.
 - You must also use Linux magic (e.x. '#!/bin/sh') at the top
 - The 'set -e' flag must be set in the beginning
   - OR -
   Proper messures are taken to fail the script when possible
 - All variables used in the script that should be accessible
   to the end user must be prefaced with "$SOV" (immediately
   after the 'set -e') and follow with '$EOV'. This is done to
   combine documentation and functionality for the
   script creator/user and allow the '--dump' flag to present
   these variables to the end user for customization
 - They must be self executable (have their own execution bit set)

Here is an example script:

#!/bin/bash

set -e

$SOV
CC="gcc"
CFLAGS="${CFLAGS}"
$EOV

test -f ./configure

./configure
make CC="${CC}" CFLAGS="${CFLAGS}"
make install
EOF
}

ifio_msg(){
# ifio_msg <message>
# ifio_msg [pass|fail|none] <message>

if [ $quiet -eq 1 ]; then
  return
fi

CLEAR='\033[0m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'

total_msg="[IFIO] "
status=''
msg_color=''
stat_color=''
clr_color=''

if [ $colorize -eq 1 ]; then
  msg_color="${ORANGE}"
  clr_color="${CLEAR}"
  if [ $# -eq 2 ]; then
    case "${1}" in
      pass) stat_color="${GREEN}"; ;;
      fail) stat_color="${RED}"; ;;
    esac
  fi
fi

if [ $# -eq 2 ]; then
  case "${1}" in
    pass) status="${msg_color}[${stat_color}✔${msg_color}]"; ;;
    fail) status="${msg_color}[${stat_color}✗${msg_color}]"; ;;
    none) status="${msg_color}[${stat_color} ${msg_color}]"; ;;
  esac
  shift
fi

total_msg="${msg_color}${total_msg}${status} ${1}${clr_color}"

if [ $verbose -ne 1 ]; then
  printf "${total_msg}\n"
else
  printf "${total_msg}" | sed 's/\\r//g'
fi
}

run_script()(
# run_script <script>
if [ $verbose -ne 1 ]; then
  exec 1>/dev/null 2>/dev/null
fi

if [ $colorize -eq 1 ]; then
  wzk-colorize $@
else
  $@
fi
exit $?
)

update_mnemonic(){
# update_mnemonic <script>
if [ -f "${mnemonic}" ]; then
  sed -i -e "s>^$(pwd):.*$>DELETEME>" -e '/DELETEME/d' "${mnemonic}"
  echo "$(pwd):$(basename "${1}")" >> "${mnemonic}"
fi
}

attempt(){
# attempt <script>
ifio_msg none "${1}\n"
run_script "${1}"
res=$?
cln_git
if [ $res -eq 0 ]; then
  ifio_msg pass "${1}\n"
  update_mnemonic "${1}"
else
  ifio_msg fail "${1}\n"
fi
return $res
}

add_git(){
if [ -z "$(which git)" ]; then
  ifio_msg "Cannot autoclean; not git executable present"
elif [ ! -d .git ]; then
  git init .
  touch .ifio_git
  git add .
  git commit -m "IFIO CHECKPOINT"
fi
}

cln_git(){
if [ -z "$(which git)" ]; then
  ifio_msg "Cannot autoclean; not git executable present"
else
  git reset HEAD --hard
  git clean -xfdf
fi
}

rem_git(){
if [ -f .ifio_git ]; then
  rm -rf .git .ifio_git
fi
}

search_path(){
# search_path <script_name>
echo "${IFIO_PATH}" | sed 's/:/\n/g' | \
  while read dir; do
    if (find "${dir}" -type f -maxdepth 1 | grep -qs "${1}$" ); then
      echo "${dir}/${1}"
    fi
  done
}

trap rem_git EXIT

chdir="${1:-./}"

# Check for IFIO_PATH
if [ -z "${IFIO_PATH}" ]; then
  echo "IFIO_PATH is undefined. Please set this variable to a valid directory or directories" >&2
  exit 1
fi

chdir="./"
mnemonic=""
verbose=0
quiet=0
colorize=0
dump=""
use=""

while [ $# -gt 0 ]; do
  case "${1}" in
    -c|--chdir) shift; chdir="${1}"; ;;
    -m|--mnemonic) shift; mnemonic="$(realpath "${1}")"; ;;
    -v|--verbose) verbose=1; ;;
    -q|--quiet) quiet=1; ;;
    -k|--colorize) colorize=1; ;;
    -h|--help) _usage; exit; ;;
    -d|--dump) shift; dump="${1}"; ;;
    -u|--use) shift; use="${1}"; ;;
    *) echo "Unknown option" >&2; _usage; exit 2; ;;
  esac
  shift
done

# Check for dump
if [ ! -z "${dump}" ]; then
  dmpscr="$(which wzk-dumpvars)"
  env - SOV="set -a" EOV="source ${dmpscr:-./wzk-dumpvars}" "$(search_path "${dump}")"
  exit
fi

if [ ! -z "${mnemonic}" -a ! -f "${mnemonic}" ]; then
  touch "${mnemonic}"
fi

cd "${chdir}"

add_git

# If "use" was specified, try it
if [ ! -z "${use}" ]; then
  if [ -f "$(search_path "${use}")" ]; then
    attempt "$(search_path "${use}")" && exit 0  # Exit if successful
  fi
fi

# Try to run the cached option
if [ -f "${mnemonic}" ]; then
  firsttry="$(grep "$(pwd)" "${mnemonic}" | cut -d':' -f2)"
  if [ ! -z "${firsttry}" -a -f "$(search_path "${firsttry}")" ]; then
    attempt "$(search_path "${firsttry}")" && exit 0  # Exit if successful
  fi
fi

# Try all scripts
echo "${IFIO_PATH} | sed 's/:/\n/g'" | \
while read dir; do
  for scr in ${dir}/*; do
    attempt "${scr}" && exit 0  # Exit if successful
  done
done #< <(echo "${IFIO_PATH} | sed 's/:/\n/g'")

ifio_msg "Unable to build with given scripts\n"
exit 1
