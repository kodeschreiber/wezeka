#!/bin/bash

_usage(){
cat <<'EOF'
IFIO (I'll Figure It Out)

Using a directory of templated scripts, attempts to run
each in a target directory

Usage: ifio [OPTIONS [ARG]]

OPTIONS:
  -c,--chdir <directory>
    Change to directory before building. Default is the current working directory

  -m,--mnemonic <file>
    Use this file to remember sucessful directory/build combinations

  -v,--verbose
    Allow all running scripts to output (stdout/stderr). Default is not verbose

  -q,--quiet
    Do not print IFIO messages. Default is not quiet

  -k,--clean <path_to_script>
    Run a cleaning script in the directory between each build attempt

  -d,--dump <script>
    Print a list of the importatint environment variables defined in specified script

VARIABLES:

IFIO_SCRIPT_DIR
  Set to the directory containing your IFIO scripts

IFIO SCRIPTS:

Scripts should be writen in a way that they present user-accessible
variables easily, perform ealry tests to fail as quickly as possbile
(to allow finding the right 'fit' for the job quickly), and perform
a highly redundant task using a single script

IFIO Scripts must adhere to a few rules:
 - They must written a (POSIX compliant) SHELL language.
 - You must also use Linux magic (e.x. '#!/bin/sh') at the top
 - The 'set -e' flag must be set in the beginning
   - OR -
   Proper messures are taken to fail the script when possible
 - All variables used in the script that should be accessible
   to the end user must be prefaced with "$SOV" (immediately
   after the 'set -e') and follow with '$EOV'. This is done to
   combine documentation and functionality for the
   script creator/user and allow the '--dump' flag to present
   these variables to the end user for customization
 - They must be self executable (have their own execution bit set)

Here is an example script:

#!/bin/bash

set -e

$SOV
CC="gcc"
CFLAGS="${CFLAGS}"
$EOV

test -f ./configure

./configure
make CC="${CC}" CFLAGS="${CFLAGS}"
make install
EOF
}

ifio_msg(){
if [ $quiet -ne 1 ]; then
  if [ $verbose -ne 1 ]; then
    echo -ne "${@}"
  else
    echo "${@}" | sed 's/\\r//g;s/\\n//g'
  fi
fi
}

run_script(){
# run_script <script>
if [ $verbose -ne 1 ]; then
  exec 1>/dev/null 2>/dev/null
fi
$@
exit $?
}

update_mnemonic(){
# update_mnemonic <script>
if [ -f "${mnemonic}" ]; then
  sed -i -e "s>^$(pwd):.*$>DELETEME>" -e '/DELETEME/d' "${mnemonic}"
  echo "$(pwd):$(basename "${1}")" >> "${mnemonic}"
fi
}

attempt(){
# attempt <script>
ifio_msg "[IFIO] [ ] ${1}"
run_script "${1}"
res=$?
if [ $res -eq 0 ]; then
  ifio_msg "\r[IFIO] [✔] ${1}\n"
  update_mnemonic "${1}"
else
  ifio_msg "\r[IFIO] [✗] ${1}\n"
fi
return $res
}

chdir="${1:-./}"

# Check for IFIO_SCRIPT_DIR
if [ -z "${IFIO_SCRIPT_DIR}" ]; then
  echo "IFIO_SCRIPT_DIR is undefined. Please set this variable to a valid directory" >&2
  exit 1
fi

chdir="./"
mnemonic=""
verbose=0
quiet=0
clean=""
dump=""

while [ $# -gt 0 ]; do
  case "${1}" in
    -c|--chdir) shift; chdir="${1}"; ;;
    -m|--mnemonic) shift; mnemonic="$(realpath "${1}")"; ;;
    -v|--verbose) verbose=1; ;;
    -q|--quiet) quiet=1; ;;
    -k|--clean) shift; clean="${1}"; ;;
    -h|--help) usage; exit; ;;
    -d|--dump) shift; dump="${1}"; ;;
    *) echo "Unknown option" >&2; usage; exit 2; ;;
  esac
  shift
done

# Check for dump
if [ ! -z "${dump}" ]; then
  dmpscr="$(which wzk-dumpvars)"
  env - SOV="set -a" EOV="source ${dmpscr:-./wzk-dumpvars}" "${IFIO_SCRIPT_DIR}/${dump}"
  exit
fi

if [ ! -z "${mnemonic}" -a ! -f "${mnemonic}" ]; then
  touch "${mnemonic}"
fi

cd "${chdir}"

# Try to run the cached option
if [ -f "${mnemonic}" ]; then
  firsttry="$(grep "$(pwd)" "${mnemonic}" | cut -d':' -f2)"
  if [ ! -z "${firsttry}" -a -f "${IFIO_SCRIPT_DIR}/${firsttry}" ]; then
    attempt "${IFIO_SCRIPT_DIR}/${firsttry}"
    if [ $? -eq 0 ]; then
      exit 0
    else
      if [ ! -z "${clean}" ]; then
        $clean
      fi
    fi
  fi
fi

# Try all scripts
for scr in ${IFIO_SCRIPT_DIR}/*; do
  attempt "${scr}"
  if [ $? -eq 0 ]; then
    exit 0
  else
    if [ ! -z "${clean}" ]; then
      $clean
    fi
  fi
done

ifio_msg "Unable to build with given scripts\n"
exit 1
