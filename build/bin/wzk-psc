#!/bin/bash

_usage(){
cat <<'EOF'
 - PRE-SHELL COMPILER -

Usage: psc [shell_script] [output_file]

Options:
  Both the input and output targets may be undefined,
   defaulting to stdin and stout, repectively

Syntax:
  All options are prefixed with a pound sign (#):

  #func filepath
  - Pulls in shell script as a function.

  #hfunc filepath
  - Pulls in shell script as a hidden function
    (prefixed with an underscore)

  #sfunc filepath
  - Pulls in shell script as a subshell function
    (using parenthesis instead of curly braces)

  #hsfunc filepath
  - Pulls in shell script as a hidden subshell function
    (using parenthesis instead of curly braces; underscore prefix)

  #file filepath
  - Inserts contents of file over this reference

  #usage filepath
  - Creates a function called '_usage' that will print
    the scripts usage information to stderr
EOF
}

if [ "${1}" == "-h" ]; then
  _usage
  exit 1
fi

awk -v ctx="${CONTEXT:-./}" -f <(cat <<"EOF"
!/^\s*#func|^\s*#hfunc|^\s*#sfunc|^\s*#hsfunc|^\s*#file|^\s*#usage/ {
  print $0
}

/^\s*#func .*/ {
  split($0, cmdarr, " ")
  n=split(cmdarr[2], nodes, "/")
  split(nodes[n], file, ".")
  gsub($0, file[1] "(){")
  print $1
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){ if(substr(line,0,2) != "#!"){print line}}
  close(infile)
  print "}"
}

/^\s*#hfunc .*/ {
  split($0, cmdarr, " ")
  n=split(cmdarr[2], nodes, "/")
  split(nodes[n], file, ".")
  gsub($0, "_" file[1] "(){")
  print $1
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){ if(substr(line,0,2) != "#!"){print line}}
  close(infile)
  print "}"
}

/^\s*#sfunc .*/ {
  split($0, cmdarr, " ")
  n=split(cmdarr[2], nodes, "/")
  split(nodes[n], file, ".")
  gsub($0, file[1] "()(")
  print $1
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){ if(substr(line,0,2) != "#!"){print line}}
  close(infile)
  print ")"
}

/^\s*#hsfunc .*/ {
  split($0, cmdarr, " ")
  n=split(cmdarr[2], nodes, "/")
  split(nodes[n], file, ".")
  gsub($0, "_" file[1] "()(")
  print $1
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){ if(substr(line,0,2) != "#!"){print line}}
  close(infile)
  print ")"
}

/^\s*#file .*/ {
  split($0, cmdarr, " ")
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){print line}
  close(infile)
}

/^\s*#usage .*/ {
  split($0, cmdarr, " ")
  n=split(cmdarr[2], nodes, "/")
  FS="@"
  gsub($0, "_usage(){\ncat <<'EOF'")
  print $1
  FS=" "
  infile=ctx "/" cmdarr[2]
  while(getline line<infile){print line}
  close(infile)
  print "EOF\n}"
}
EOF
) <"${1:-/dev/stdin}" >"${2:-/dev/stdout}"
